
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // Grab the function selector from the calldata
    0x00 calldataload 0xE0 shr                      // [selector]
    dup1 __FUNC_SIG(multiply) eq multiply jumpi     // [selector]

    // Revert if no functions match
    0x00 0x00 revert

    // dispatch
    multiply:
    0x04            // [4]
    calldataload    // [a]
    dup1            // [a, a]
    0x24            // [36, a, a]
    calldataload    // [b, a, a]
    dup1            // [b, b, a, a]
    swap2           // [a, b, b, a]
    mul             // [(a*b), b, a]
    dup1            // [(a*b), (a*b), b, a]

    // check if result is zero
    iszero          // [0==(a*b), (a*b), b, a]
    zeroJump        // [dispatch, 0==(a*b), (a*b), b, a]
    jumpi           // jump if 0==(a*b)
            
    dup1            // [(a*b), (a*b), b, a]
    swap3           // [a, (a*b), b, (a*b)]
    swap1           // [(a*b), a, b, (a*b)]
    div             // [(a*b)/a, b, (a*b)]
    eq              // [((a*b)/a)==b, (a*b)]
    successJump     // [dispatch, ((a*b)/a)==b, (a*b)]
    jumpi           // jump if ((a*b)/a)==b

    // revert if overflow
    0x00 0x00 revert

    // dispatch
    zeroJump:
    0x00 0x00
    mstore
    0x20 0x00   
    return
        
    successJump:
    0x00           
    mstore        
    0x20 0x00   
    return
}
