
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    returndatasize          // [0]
    calldataload            // [calldata]
    0xe0                    // [224, calldata]
    shr                     // [function selector]
    dup1                    // [function selector, function selector]
    __FUNC_SIG(foo)         // [function selector(foo), function selector, function selector]
    eq                      // [function selector(foo)==function selector, function selector]
    foo                     // [dispatch, function selector(foo)==function selector, function selector]
    jumpi                   // jump if (function selector(foo)==function selector)
    __FUNC_SIG(bar)         // [function selector(bar), function selector]
    eq                      // [function selector(bar)==function selector]
    bar                     // [dispatch, function selector(bar)==function selector]
    jumpi                   // jump if (function selector(bar)==function selector)

    push0
    push0
    revert

    foo:
        0x02
        0x00
        mstore
        0x20
        0x00
        return
    bar:
        0x03
        0x00
        mstore
        0x20
        0x00
        return
}