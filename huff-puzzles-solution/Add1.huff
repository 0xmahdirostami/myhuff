
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // Grab the function selector from the calldata
    0x00 calldataload 0xE0 shr              // [selector]
    dup1 __FUNC_SIG(add1) eq add1 jumpi     // [selector]

    // Revert if no functions match
    0x00 0x00 revert

    add1:
    0x04            // [4]
    calldataload    // [value]
    dup1            // [value, value]
    0x01            // [1, value, value]
    add             // [sum, value]
    dup1            // [sum, sum, value]
    swap2           // [value, sum, sum]
    lt
    sucess          // [dispatch, (value<sum), sum]
    jumpi           // jump if (value<sum))

    // Revert if overflow
    0x00 0x00 revert

    // dispatch
    sucess:
    0x00            // [0, sum]
    mstore          // []
    0x20 0x00       // [0, 32]
    return
}
